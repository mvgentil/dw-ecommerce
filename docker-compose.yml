version: '3'

services:
  postgres:
    container_name: fake_store_db
    image: postgres:15
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: fake_store
    ports:
      - 55432:5432
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - fake-store-network

  pgadmin:
    container_name: pgadmin_db
    image: dpage/pgadmin4
    ports:
      - 5050:80
    depends_on:
      - postgres
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: admin
    volumes:
      - pgadmin-data:/var/lib/pgadmin
    networks:
      - fake-store-network
  app:
    build: .
    container_name: fake_store_app
    depends_on:
      - postgres
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/fake_store
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - BUCKET_NAME=${BUCKET_NAME}
    command: python src/main.py

  dbt:
    image: ghcr.io/dbt-labs/dbt-postgres:1.7.9
    container_name: fake_store_dbt
    depends_on:
      - postgres
    volumes:
      - ./dbt_project:/usr/app
    working_dir: /usr/app
    environment:
      - DBT_PROFILES_DIR=/usr/app
    ports:
      - 8080:8080
    networks:
      - fake-store-network
  
  # entrypoint: ["dbt", "docs", "serve", "--port", "8080", "--host", "0.0.0.0"] # Serve a documentação do dbt na porta 8080
    entrypoint: ["tail", "-f", "/dev/null"]  # Fica "parado" esperando rodar dbt


volumes:
  pgdata:
  pgadmin-data:

networks:
  fake-store-network:
    driver: bridge